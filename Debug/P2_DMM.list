
P2_DMM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002958  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca4  08002ca4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002ca4  08002ca4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ca4  08002ca4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ca8  08002ca8  00012ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012dc8  20000010  08002cbc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012dd8  08002cbc  00022dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006990  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c5  00000000  00000000  000269d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  00027e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000588  00000000  00000000  000284d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256eb  00000000  00000000  00028a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007898  00000000  00000000  0004e14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e28a5  00000000  00000000  000559e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138288  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017d8  00000000  00000000  001382d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ac8 	.word	0x08002ac8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002ac8 	.word	0x08002ac8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <ADC_init>:
#define ADC_PORT GPIOA
#define DELAY 40000
#define DC_SAMPLE_COUNT 1838
#define AC_SAMPLE_COUNT 36764

void ADC_init(void) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
	// ----------------- Configure GPIOA -----------------
	// ADC12_IN5 -> PA0
	// enable clock for GPIOA
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000a1a:	4b55      	ldr	r3, [pc, #340]	; (8000b70 <ADC_init+0x15c>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a54      	ldr	r2, [pc, #336]	; (8000b70 <ADC_init+0x15c>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
	// enable analog switch register for PA0 (channel)
	ADC_PORT->ASCR |= GPIO_ASCR_ASC0;
 8000a26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	62d3      	str	r3, [r2, #44]	; 0x2c
	// set mode to analog mode (11)
	ADC_PORT->MODER &= ~(GPIO_MODER_MODE0);
 8000a36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a40:	f023 0303 	bic.w	r3, r3, #3
 8000a44:	6013      	str	r3, [r2, #0]
	ADC_PORT->MODER |= (3 << GPIO_MODER_MODE0_Pos);
 8000a46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a50:	f043 0303 	orr.w	r3, r3, #3
 8000a54:	6013      	str	r3, [r2, #0]
	// Fast Speed (11)
	ADC_PORT->OSPEEDR &= ~(GPIO_MODER_MODE0);
 8000a56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a60:	f023 0303 	bic.w	r3, r3, #3
 8000a64:	6093      	str	r3, [r2, #8]
	ADC_PORT->OSPEEDR |= (3 << GPIO_OSPEEDR_OSPEED0_Pos);
 8000a66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a70:	f043 0303 	orr.w	r3, r3, #3
 8000a74:	6093      	str	r3, [r2, #8]


	// ----------------- Configure ADC -----------------
	// enable ADC clock
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000a76:	4b3e      	ldr	r3, [pc, #248]	; (8000b70 <ADC_init+0x15c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a3d      	ldr	r2, [pc, #244]	; (8000b70 <ADC_init+0x15c>)
 8000a7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c

	// ADC will run at the same speed as CPE (HCLK / 1), Prescaler = 1
	ADC123_COMMON->CCR = (1 << ADC_CCR_CKMODE_Pos);
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <ADC_init+0x160>)
 8000a84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a88:	609a      	str	r2, [r3, #8]

	// Power up ADC
	ADC1->CR &= ~(ADC_CR_DEEPPWD); 				// set deep power down mode low
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <ADC_init+0x164>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	4a3a      	ldr	r2, [pc, #232]	; (8000b78 <ADC_init+0x164>)
 8000a90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000a94:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (ADC_CR_ADVREGEN); 				// set voltage regulator high
 8000a96:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <ADC_init+0x164>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	4a37      	ldr	r2, [pc, #220]	; (8000b78 <ADC_init+0x164>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6093      	str	r3, [r2, #8]
	for (uint32_t i = DELAY; i > 0; i--); 			// wait at least 20 (us) microseconds
 8000aa2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	e002      	b.n	8000ab0 <ADC_init+0x9c>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f9      	bne.n	8000aaa <ADC_init+0x96>

	// calibrate the ADC
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); // ensure ADC is disabled and single-ended mode
 8000ab6:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <ADC_init+0x164>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	4a2f      	ldr	r2, [pc, #188]	; (8000b78 <ADC_init+0x164>)
 8000abc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000ac0:	f023 0301 	bic.w	r3, r3, #1
 8000ac4:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (ADC_CR_ADCAL); 					// start calibration
 8000ac6:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <ADC_init+0x164>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	4a2b      	ldr	r2, [pc, #172]	; (8000b78 <ADC_init+0x164>)
 8000acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad0:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL); 				// wait for calibration to finish
 8000ad2:	bf00      	nop
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <ADC_init+0x164>)
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dbfb      	blt.n	8000ad4 <ADC_init+0xc0>

	// configure for single-ended mode on channel 5
	// must be set before enabling the ADC
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5); 		// using ADC123_IN5 channel
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <ADC_init+0x164>)
 8000ade:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000ae2:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <ADC_init+0x164>)
 8000ae4:	f023 0320 	bic.w	r3, r3, #32
 8000ae8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	// enable ADC (writing a 1, sets to 0)
	ADC1->ISR |= (ADC_ISR_ADRDY); 				// clear ready bit with a 1
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <ADC_init+0x164>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a21      	ldr	r2, [pc, #132]	; (8000b78 <ADC_init+0x164>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6013      	str	r3, [r2, #0]
	ADC1->CR |= (ADC_CR_ADEN); 					// enable ADC
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <ADC_init+0x164>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <ADC_init+0x164>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & ADC_ISR_ADRDY)); 		// wait for ready flag = 1
 8000b04:	bf00      	nop
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <ADC_init+0x164>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0f9      	beq.n	8000b06 <ADC_init+0xf2>
	ADC1->ISR |= (ADC_ISR_ADRDY);				 	// clear ready bit with a 1
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <ADC_init+0x164>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <ADC_init+0x164>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6013      	str	r3, [r2, #0]

	// check caution on p.521 for GPIOx_ASCR register

	// configure ADC
	ADC1->SQR1 = (5 << ADC_SQR1_SQ1_Pos);  		// set sequence 1 for 1 conversion on channel 5
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <ADC_init+0x164>)
 8000b20:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30

	// 12-bit resolution, software trigger, right align, single conversion mode
	ADC1->CFGR = 0;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <ADC_init+0x164>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]

	// sampling time for channel 5 to 2.5 clocks
	ADC1->SMPR1 = 0x111;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <ADC_init+0x164>)
 8000b2e:	f240 1211 	movw	r2, #273	; 0x111
 8000b32:	615a      	str	r2, [r3, #20]

	// enable interrupts for end of conversion
	ADC1->IER |= (ADC_IER_EOC);
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <ADC_init+0x164>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <ADC_init+0x164>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6053      	str	r3, [r2, #4]
	ADC1->ISR |= (ADC_ISR_EOC); 					// clear flag with a 1
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <ADC_init+0x164>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <ADC_init+0x164>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	6013      	str	r3, [r2, #0]

	// enable interrupt in the NVIC
	NVIC->ISER[0] = (1 << (ADC1_2_IRQn & 0x1F));
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <ADC_init+0x168>)
 8000b4e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b52:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b54:	b662      	cpsie	i
}
 8000b56:	bf00      	nop
	// configure GPIO for channel 5
	/////////////////////////////////////////////////


	// start a conversion
	ADC1->CR |= (ADC_CR_ADSTART);
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <ADC_init+0x164>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <ADC_init+0x164>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6093      	str	r3, [r2, #8]


}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40021000 	.word	0x40021000
 8000b74:	50040300 	.word	0x50040300
 8000b78:	50040000 	.word	0x50040000
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <find_max>:

// TOTAL_CNT = 20

uint16_t find_max(uint16_t arr[]) {
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	uint16_t pos = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	81fb      	strh	r3, [r7, #14]
	uint16_t max = arr[pos];
 8000b8c:	89fb      	ldrh	r3, [r7, #14]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	81bb      	strh	r3, [r7, #12]
	while (pos < AC_SAMPLE_COUNT){
 8000b98:	e010      	b.n	8000bbc <find_max+0x3c>
		if (arr[pos] > max){
 8000b9a:	89fb      	ldrh	r3, [r7, #14]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	89ba      	ldrh	r2, [r7, #12]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d205      	bcs.n	8000bb6 <find_max+0x36>
			max = arr[pos];
 8000baa:	89fb      	ldrh	r3, [r7, #14]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	81bb      	strh	r3, [r7, #12]
		}
		pos++;
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	81fb      	strh	r3, [r7, #14]
	while (pos < AC_SAMPLE_COUNT){
 8000bbc:	89fb      	ldrh	r3, [r7, #14]
 8000bbe:	f648 729b 	movw	r2, #36763	; 0x8f9b
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d9e9      	bls.n	8000b9a <find_max+0x1a>
	}
	return max;
 8000bc6:	89bb      	ldrh	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <find_min>:

uint16_t find_min(uint16_t arr[]){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	uint16_t pos = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	81fb      	strh	r3, [r7, #14]
	uint16_t min = arr[pos];
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	81bb      	strh	r3, [r7, #12]
	while (pos < AC_SAMPLE_COUNT){
 8000bec:	e010      	b.n	8000c10 <find_min+0x3c>
		if (arr[pos] < min){
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	89ba      	ldrh	r2, [r7, #12]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d905      	bls.n	8000c0a <find_min+0x36>
			min = arr[pos];
 8000bfe:	89fb      	ldrh	r3, [r7, #14]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	81bb      	strh	r3, [r7, #12]
		}
		pos++;
 8000c0a:	89fb      	ldrh	r3, [r7, #14]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	81fb      	strh	r3, [r7, #14]
	while (pos < AC_SAMPLE_COUNT){
 8000c10:	89fb      	ldrh	r3, [r7, #14]
 8000c12:	f648 729b 	movw	r2, #36763	; 0x8f9b
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d9e9      	bls.n	8000bee <find_min+0x1a>
	}
	return min;
 8000c1a:	89bb      	ldrh	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <find_avg>:

uint32_t find_avg(uint16_t arr[]){
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	uint16_t pos = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	82fb      	strh	r3, [r7, #22]
	uint32_t val = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
	while (pos < DC_SAMPLE_COUNT){
 8000c38:	e00b      	b.n	8000c52 <find_avg+0x2a>
		val += arr[pos];
 8000c3a:	8afb      	ldrh	r3, [r7, #22]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	4413      	add	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
		pos++;
 8000c4c:	8afb      	ldrh	r3, [r7, #22]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	82fb      	strh	r3, [r7, #22]
	while (pos < DC_SAMPLE_COUNT){
 8000c52:	8afb      	ldrh	r3, [r7, #22]
 8000c54:	f240 722d 	movw	r2, #1837	; 0x72d
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d9ee      	bls.n	8000c3a <find_avg+0x12>
	}
	uint32_t avg = val / DC_SAMPLE_COUNT;
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	085b      	lsrs	r3, r3, #1
 8000c60:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <find_avg+0x50>)
 8000c62:	fba2 2303 	umull	r2, r3, r2, r3
 8000c66:	0a5b      	lsrs	r3, r3, #9
 8000c68:	60fb      	str	r3, [r7, #12]
	return avg;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	371c      	adds	r7, #28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	8e9fe543 	.word	0x8e9fe543

08000c7c <find_p2p>:
	}
	uint32_t avg = sqrt((val / AC_SAMPLE_COUNT));
	return avg;
}

uint32_t find_p2p(uint16_t arr[]){
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	uint32_t p2p_value = find_max(arr) - find_min(arr);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff7b 	bl	8000b80 <find_max>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa0 	bl	8000bd4 <find_min>
 8000c94:	4603      	mov	r3, r0
 8000c96:	1ae3      	subs	r3, r4, r3
 8000c98:	60fb      	str	r3, [r7, #12]
	return p2p_value;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	0000      	movs	r0, r0
	...

08000ca8 <calibrate_volt>:


float calibrate_volt(uint16_t num){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
	float res = (821 * num - 5060) / 1000000.0;
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	f240 3235 	movw	r2, #821	; 0x335
 8000cb8:	fb02 f303 	mul.w	r3, r2, r3
 8000cbc:	f5a3 539e 	sub.w	r3, r3, #5056	; 0x13c0
 8000cc0:	3b04      	subs	r3, #4
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fbda 	bl	800047c <__aeabi_i2d>
 8000cc8:	a30b      	add	r3, pc, #44	; (adr r3, 8000cf8 <calibrate_volt+0x50>)
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	f7ff fd69 	bl	80007a4 <__aeabi_ddiv>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f7ff fe4b 	bl	8000974 <__aeabi_d2f>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	60fb      	str	r3, [r7, #12]
	return res;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	ee07 3a90 	vmov	s15, r3
}
 8000ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	412e8480 	.word	0x412e8480

08000d00 <floatToString>:

// Converts a float to a string with the specified number of decimal places
void floatToString(float num, char* result, int decimalPlaces) {
 8000d00:	b480      	push	{r7}
 8000d02:	b08d      	sub	sp, #52	; 0x34
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d0a:	60b8      	str	r0, [r7, #8]
 8000d0c:	6079      	str	r1, [r7, #4]
	int i = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	int integerPart = (int)num;
 8000d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d1a:	ee17 3a90 	vmov	r3, s15
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
	float decimalPart = num - integerPart;
 8000d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d32:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	// Handle negative numbers
	if (integerPart < 0) {
 8000d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da10      	bge.n	8000d5e <floatToString+0x5e>
		result[i++] = '-';
 8000d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d42:	461a      	mov	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4413      	add	r3, r2
 8000d48:	222d      	movs	r2, #45	; 0x2d
 8000d4a:	701a      	strb	r2, [r3, #0]
		integerPart = -integerPart;
 8000d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4e:	425b      	negs	r3, r3
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
		decimalPart = -decimalPart;
 8000d52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d56:	eef1 7a67 	vneg.f32	s15, s15
 8000d5a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}
	// Convert integer part to string
	int j = i;
 8000d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d60:	623b      	str	r3, [r7, #32]
	do {
		result[j++] = integerPart % 10 + '0';
 8000d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d64:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <floatToString+0x178>)
 8000d66:	fb83 1302 	smull	r1, r3, r3, r2
 8000d6a:	1099      	asrs	r1, r3, #2
 8000d6c:	17d3      	asrs	r3, r2, #31
 8000d6e:	1ac9      	subs	r1, r1, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad1      	subs	r1, r2, r3
 8000d7a:	b2ca      	uxtb	r2, r1
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
 8000d7e:	1c59      	adds	r1, r3, #1
 8000d80:	6239      	str	r1, [r7, #32]
 8000d82:	4619      	mov	r1, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	440b      	add	r3, r1
 8000d88:	3230      	adds	r2, #48	; 0x30
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	701a      	strb	r2, [r3, #0]
		integerPart /= 10;
 8000d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d90:	4a39      	ldr	r2, [pc, #228]	; (8000e78 <floatToString+0x178>)
 8000d92:	fb82 1203 	smull	r1, r2, r2, r3
 8000d96:	1092      	asrs	r2, r2, #2
 8000d98:	17db      	asrs	r3, r3, #31
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
	} while (integerPart);
 8000d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1de      	bne.n	8000d62 <floatToString+0x62>
	// Reverse the integer part
	for (int k = i; k < j / 2; k++) {
 8000da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	e01a      	b.n	8000de0 <floatToString+0xe0>
		char temp = result[k];
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	75fb      	strb	r3, [r7, #23]
		result[k] = result[j - k - 1];
 8000db4:	6a3a      	ldr	r2, [r7, #32]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	441a      	add	r2, r3
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	440b      	add	r3, r1
 8000dc6:	7812      	ldrb	r2, [r2, #0]
 8000dc8:	701a      	strb	r2, [r3, #0]
		result[j - k - 1] = temp;
 8000dca:	6a3a      	ldr	r2, [r7, #32]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	7dfa      	ldrb	r2, [r7, #23]
 8000dd8:	701a      	strb	r2, [r3, #0]
	for (int k = i; k < j / 2; k++) {
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	0fda      	lsrs	r2, r3, #31
 8000de4:	4413      	add	r3, r2
 8000de6:	105b      	asrs	r3, r3, #1
 8000de8:	461a      	mov	r2, r3
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	4293      	cmp	r3, r2
 8000dee:	dbdc      	blt.n	8000daa <floatToString+0xaa>
	}
	// Add decimal point if required
	if (decimalPlaces > 0) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	dd07      	ble.n	8000e06 <floatToString+0x106>
		result[j++] = '.';
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	623a      	str	r2, [r7, #32]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	4413      	add	r3, r2
 8000e02:	222e      	movs	r2, #46	; 0x2e
 8000e04:	701a      	strb	r2, [r3, #0]
	}
	// Convert decimal part to string
	for (int k = 0; k < decimalPlaces; k++) {
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	e025      	b.n	8000e58 <floatToString+0x158>
		decimalPart *= 10;
 8000e0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		result[j++] = (int)decimalPart % 10 + '0';
 8000e1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e24:	ee17 1a90 	vmov	r1, s15
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <floatToString+0x178>)
 8000e2a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e2e:	109a      	asrs	r2, r3, #2
 8000e30:	17cb      	asrs	r3, r1, #31
 8000e32:	1ad2      	subs	r2, r2, r3
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	1aca      	subs	r2, r1, r3
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	1c59      	adds	r1, r3, #1
 8000e44:	6239      	str	r1, [r7, #32]
 8000e46:	4619      	mov	r1, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3230      	adds	r2, #48	; 0x30
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	701a      	strb	r2, [r3, #0]
	for (int k = 0; k < decimalPlaces; k++) {
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	3301      	adds	r3, #1
 8000e56:	61bb      	str	r3, [r7, #24]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbd5      	blt.n	8000e0c <floatToString+0x10c>
	}
	// Null terminate the string
	result[j] = '\0';
 8000e60:	6a3b      	ldr	r3, [r7, #32]
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	4413      	add	r3, r2
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	3734      	adds	r7, #52	; 0x34
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	66666667 	.word	0x66666667

08000e7c <timer_init>:
#include "DMM.h"

#define MAX_IDX 9

void timer_init(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN; // enable clock for GPIOC
 8000e80:	4b4a      	ldr	r3, [pc, #296]	; (8000fac <timer_init+0x130>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e84:	4a49      	ldr	r2, [pc, #292]	; (8000fac <timer_init+0x130>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	64d3      	str	r3, [r2, #76]	; 0x4c
    // set up GPIOC0 as output /
    GPIOC->MODER &= ~(GPIO_MODER_MODE0); // clear MODE0
 8000e8c:	4b48      	ldr	r3, [pc, #288]	; (8000fb0 <timer_init+0x134>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a47      	ldr	r2, [pc, #284]	; (8000fb0 <timer_init+0x134>)
 8000e92:	f023 0303 	bic.w	r3, r3, #3
 8000e96:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << GPIO_MODER_MODE0_Pos); // set MODE0 to 01 (output mode)
 8000e98:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <timer_init+0x134>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a44      	ldr	r2, [pc, #272]	; (8000fb0 <timer_init+0x134>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]
    GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0); // set OTYPE0 to push-pull
 8000ea4:	4b42      	ldr	r3, [pc, #264]	; (8000fb0 <timer_init+0x134>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4a41      	ldr	r2, [pc, #260]	; (8000fb0 <timer_init+0x134>)
 8000eaa:	f023 0301 	bic.w	r3, r3, #1
 8000eae:	6053      	str	r3, [r2, #4]
    GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0); // set OSPEED0 to low speed
 8000eb0:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <timer_init+0x134>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	4a3e      	ldr	r2, [pc, #248]	; (8000fb0 <timer_init+0x134>)
 8000eb6:	f023 0303 	bic.w	r3, r3, #3
 8000eba:	6093      	str	r3, [r2, #8]
    GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0); // set PUPD0 to no pull-up/pull-down
 8000ebc:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <timer_init+0x134>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	4a3b      	ldr	r2, [pc, #236]	; (8000fb0 <timer_init+0x134>)
 8000ec2:	f023 0303 	bic.w	r3, r3, #3
 8000ec6:	60d3      	str	r3, [r2, #12]
    GPIOC->ODR |= (GPIO_ODR_OD0); // set initial value of GPIOC0 to high
 8000ec8:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <timer_init+0x134>)
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	4a38      	ldr	r2, [pc, #224]	; (8000fb0 <timer_init+0x134>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6153      	str	r3, [r2, #20]
    // end of gpioc config/

    // enable timer clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000ed4:	4b35      	ldr	r3, [pc, #212]	; (8000fac <timer_init+0x130>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed8:	4a34      	ldr	r2, [pc, #208]	; (8000fac <timer_init+0x130>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6593      	str	r3, [r2, #88]	; 0x58

    TIM2->CCMR2 |= (1 << TIM_CCMR2_CC4S_Pos);
 8000ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	61d3      	str	r3, [r2, #28]

    // set filter duration to 4 samples /
    TIM2->CCMR2 &= ~(TIM_CCMR2_IC4F);
 8000ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000efa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000efe:	61d3      	str	r3, [r2, #28]
    TIM2->CCMR2 |= (0x0011 << TIM_CCMR2_IC4F_Pos);
 8000f00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f0a:	f443 3388 	orr.w	r3, r3, #69632	; 0x11000
 8000f0e:	61d3      	str	r3, [r2, #28]

    // select the edge of active transition /
    TIM2->CCER &= ~(TIM_CCER_CC4NP | TIM_CCER_CC4P | TIM_CCER_CC4E);
 8000f10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1a:	f423 4330 	bic.w	r3, r3, #45056	; 0xb000
 8000f1e:	6213      	str	r3, [r2, #32]

    // set pre-scaler to 0
    TIM2->CCMR2 &= ~(TIM_CCMR2_IC4PSC);
 8000f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f2a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f2e:	61d3      	str	r3, [r2, #28]

    // enable capture/compare enable
    TIM2->CCER |= TIM_CCER_CC4E;
 8000f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f3e:	6213      	str	r3, [r2, #32]
    TIM2->DIER |= TIM_DIER_CC4IE;
 8000f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	60d3      	str	r3, [r2, #12]

    // connecting COMP_OUT to TIM2 */
    TIM2->OR1  &= ~(TIM2_OR1_TI4_RMP);
 8000f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5a:	f023 030c 	bic.w	r3, r3, #12
 8000f5e:	6513      	str	r3, [r2, #80]	; 0x50
    TIM2->OR1  |= (1 << TIM2_OR1_TI4_RMP_Pos);
 8000f60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6513      	str	r3, [r2, #80]	; 0x50

    TIM2->SR &= ~(TIM_SR_UIF | TIM_SR_CC4IF); // clear update interrupt flag
 8000f70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7a:	f023 0311 	bic.w	r3, r3, #17
 8000f7e:	6113      	str	r3, [r2, #16]

    //enable interrupts in NVIC
    NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <timer_init+0x138>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <timer_init+0x138>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f8c:	b662      	cpsie	i
}
 8000f8e:	bf00      	nop

    __enable_irq();    // enable interrupts globally

     TIM2->CR1 |= (TIM_CR1_CEN);
 8000f90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <toString>:

void toString(uint32_t value, char *str, int max_index)

{
 8000fb8:	b480      	push	{r7}
 8000fba:	b08d      	sub	sp, #52	; 0x34
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
    char nums[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8000fc4:	4a33      	ldr	r2, [pc, #204]	; (8001094 <toString+0xdc>)
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fcc:	c303      	stmia	r3!, {r0, r1}
 8000fce:	801a      	strh	r2, [r3, #0]
    if (value == 0)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d107      	bne.n	8000fe6 <toString+0x2e>
    {
        str[0] = '0';
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	2230      	movs	r2, #48	; 0x30
 8000fda:	701a      	strb	r2, [r3, #0]
        str[1] = '\0';
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
                str[i] = str[i+ gap];
            }
            str[size] = '\0';
        }
    }
}
 8000fe4:	e04f      	b.n	8001086 <toString+0xce>
        uint32_t num = value;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        str[MAX_IDX - 1] = '\0'; // setting index 8 to null
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3308      	adds	r3, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
        int idx = MAX_IDX - 2;   // start adding from the end of the array
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
        int size = 0 ;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
        while(num)
 8000ffa:	e020      	b.n	800103e <toString+0x86>
            char toprint = nums[num % 10];
 8000ffc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <toString+0xe0>)
 8001000:	fba3 2301 	umull	r2, r3, r3, r1
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	1aca      	subs	r2, r1, r3
 8001010:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001014:	443b      	add	r3, r7
 8001016:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800101a:	76fb      	strb	r3, [r7, #27]
            str[idx] = toprint;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	4413      	add	r3, r2
 8001022:	7efa      	ldrb	r2, [r7, #27]
 8001024:	701a      	strb	r2, [r3, #0]
            idx -= 1;
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	3b01      	subs	r3, #1
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
            num /= 10;
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <toString+0xe0>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	08db      	lsrs	r3, r3, #3
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
            size += 1;
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	3301      	adds	r3, #1
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
        while(num)
 800103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1db      	bne.n	8000ffc <toString+0x44>
        if(size < MAX_IDX - 1) // if the number is less than 8 digits
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	2b07      	cmp	r3, #7
 8001048:	dc1d      	bgt.n	8001086 <toString+0xce>
            int gap = MAX_IDX - size - 1;
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	f1c3 0308 	rsb	r3, r3, #8
 8001050:	61fb      	str	r3, [r7, #28]
            for(int i = 0; i < size + 1; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
 8001056:	e00d      	b.n	8001074 <toString+0xbc>
                str[i] = str[i+ gap];
 8001058:	6a3a      	ldr	r2, [r7, #32]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	4413      	add	r3, r2
 800105e:	461a      	mov	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	441a      	add	r2, r3
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	440b      	add	r3, r1
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < size + 1; i++)
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	3301      	adds	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	429a      	cmp	r2, r3
 800107a:	daed      	bge.n	8001058 <toString+0xa0>
            str[size] = '\0';
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	4413      	add	r3, r2
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	3734      	adds	r7, #52	; 0x34
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	08002ae0 	.word	0x08002ae0
 8001098:	cccccccd 	.word	0xcccccccd

0800109c <comp_init>:

void comp_init(void) {
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
    /* GPIOB PB0 output configuration

	GPIOB PB2 input configuration
	GPIOB PB1 as reference voltage configuration*/
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <comp_init+0xd0>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	4a31      	ldr	r2, [pc, #196]	; (800116c <comp_init+0xd0>)
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOB->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE2| GPIO_MODER_MODE1); // clearing the registers// set PB0 to alternate function mode, PB2 to analog mode, PB1 to analog mode
 80010ac:	4b30      	ldr	r3, [pc, #192]	; (8001170 <comp_init+0xd4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a2f      	ldr	r2, [pc, #188]	; (8001170 <comp_init+0xd4>)
 80010b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010b6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |= (2 << GPIO_MODER_MODE0_Pos| 3 << GPIO_MODER_MODE2_Pos| 3 << GPIO_MODER_MODE1_Pos);
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <comp_init+0xd4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a2c      	ldr	r2, [pc, #176]	; (8001170 <comp_init+0xd4>)
 80010be:	f043 033e 	orr.w	r3, r3, #62	; 0x3e
 80010c2:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &= ~(GPIO_OTYPER_OT0);
 80010c4:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <comp_init+0xd4>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4a29      	ldr	r2, [pc, #164]	; (8001170 <comp_init+0xd4>)
 80010ca:	f023 0301 	bic.w	r3, r3, #1
 80010ce:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED2| GPIO_OSPEEDR_OSPEED1);
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <comp_init+0xd4>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4a26      	ldr	r2, [pc, #152]	; (8001170 <comp_init+0xd4>)
 80010d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010da:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |=  (3 << GPIO_OSPEEDR_OSPEED0_Pos | 3 << GPIO_OSPEEDR_OSPEED2_Pos| 3 << GPIO_OSPEEDR_OSPEED1_Pos); // set to high speed
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <comp_init+0xd4>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a23      	ldr	r2, [pc, #140]	; (8001170 <comp_init+0xd4>)
 80010e2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80010e6:	6093      	str	r3, [r2, #8]
	GPIOB->AFR[0]  &= ~(GPIO_AFRL_AFSEL0);         // clear register
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <comp_init+0xd4>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4a20      	ldr	r2, [pc, #128]	; (8001170 <comp_init+0xd4>)
 80010ee:	f023 030f 	bic.w	r3, r3, #15
 80010f2:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0]  |=  (12 << GPIO_AFRL_AFSEL0_Pos);   // set AF12 for PB0
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <comp_init+0xd4>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <comp_init+0xd4>)
 80010fa:	f043 030c 	orr.w	r3, r3, #12
 80010fe:	6213      	str	r3, [r2, #32]

    /* comparator configuration */
    COMP1->CSR |= (6 << COMP_CSR_INMSEL_Pos); // set the input selector to PB1
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <comp_init+0xd8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <comp_init+0xd8>)
 8001106:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800110a:	6013      	str	r3, [r2, #0]
    COMP1->CSR &= ~(COMP_CSR_SCALEN);          // set bit to 01
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <comp_init+0xd8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a18      	ldr	r2, [pc, #96]	; (8001174 <comp_init+0xd8>)
 8001112:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001116:	6013      	str	r3, [r2, #0]
    COMP1->CSR |= (COMP_CSR_BRGEN);
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <comp_init+0xd8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a15      	ldr	r2, [pc, #84]	; (8001174 <comp_init+0xd8>)
 800111e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001122:	6013      	str	r3, [r2, #0]
    COMP1->CSR &= ~(COMP_CSR_POLARITY);       // set polarity to 0
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <comp_init+0xd8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a12      	ldr	r2, [pc, #72]	; (8001174 <comp_init+0xd8>)
 800112a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800112e:	6013      	str	r3, [r2, #0]
    COMP1->CSR |= (COMP_CSR_INPSEL);          // set to 1, selecting PB2 as the input pin
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <comp_init+0xd8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <comp_init+0xd8>)
 8001136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800113a:	6013      	str	r3, [r2, #0]
    COMP1->CSR |= (3 << COMP_CSR_HYST_Pos);   // set to high hysterisis (11) for now
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <comp_init+0xd8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <comp_init+0xd8>)
 8001142:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001146:	6013      	str	r3, [r2, #0]
    COMP1->CSR &= ~(COMP_CSR_PWRMODE);        // set to high speed mode
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <comp_init+0xd8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a09      	ldr	r2, [pc, #36]	; (8001174 <comp_init+0xd8>)
 800114e:	f023 030c 	bic.w	r3, r3, #12
 8001152:	6013      	str	r3, [r2, #0]


    COMP1->CSR |= (COMP_CSR_EN);              // start comparing
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <comp_init+0xd8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <comp_init+0xd8>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	48000400 	.word	0x48000400
 8001174:	40010200 	.word	0x40010200

08001178 <UART_init>:
#define DELAY 1000
#define BRR_CLEAR 0xFFFF
#define UART_DIV /*0x23*/ 208
#define OUT_PORT GPIOA

void UART_init(void){
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
	// enable clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800117c:	4b3f      	ldr	r3, [pc, #252]	; (800127c <UART_init+0x104>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	4a3e      	ldr	r2, [pc, #248]	; (800127c <UART_init+0x104>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	64d3      	str	r3, [r2, #76]	; 0x4c
	// set mode to alternate function [2 is b'10] for alternate function mode
	OUT_PORT->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8001188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001196:	6013      	str	r3, [r2, #0]
	OUT_PORT->MODER |= (2 << GPIO_MODER_MODE2_Pos | 2 << GPIO_MODER_MODE3_Pos);
 8001198:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011a2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80011a6:	6013      	str	r3, [r2, #0]
	// establish ports A2, A3
	OUT_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 80011a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80011b6:	6213      	str	r3, [r2, #32]
	// shift 7 because AF7
	OUT_PORT->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos | 7 << GPIO_AFRL_AFSEL3_Pos);
 80011b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011c2:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80011c6:	6213      	str	r3, [r2, #32]
	// set to fast speed where 3 is b'11 for fast speed
	OUT_PORT->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 80011c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011d6:	6093      	str	r3, [r2, #8]
	OUT_PORT->OSPEEDR |= (3 << GPIO_OSPEEDR_OSPEED2_Pos | 3 << GPIO_OSPEEDR_OSPEED3_Pos);
 80011d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011e2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80011e6:	6093      	str	r3, [r2, #8]
	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN); // enable clock
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <UART_init+0x104>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a23      	ldr	r2, [pc, #140]	; (800127c <UART_init+0x104>)
 80011ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f2:	6593      	str	r3, [r2, #88]	; 0x58
	USART2->CR1 &= ~(USART_CR1_OVER8);
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <UART_init+0x108>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a21      	ldr	r2, [pc, #132]	; (8001280 <UART_init+0x108>)
 80011fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80011fe:	6013      	str	r3, [r2, #0]
	USART2->BRR &= ~(BRR_CLEAR);
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <UART_init+0x108>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <UART_init+0x108>)
 8001206:	0c1b      	lsrs	r3, r3, #16
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	60d3      	str	r3, [r2, #12]
	USART2->BRR |= (UART_DIV); // set baud rate to 0x23 (35)
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <UART_init+0x108>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <UART_init+0x108>)
 8001212:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001216:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~(USART_CR1_M); // set 01 for word length of 8
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <UART_init+0x108>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a18      	ldr	r2, [pc, #96]	; (8001280 <UART_init+0x108>)
 800121e:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8001222:	6013      	str	r3, [r2, #0]
	USART2->CR2 &= ~(USART_CR2_STOP); // set the STOP bit to 0 for 1 stop
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <UART_init+0x108>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a15      	ldr	r2, [pc, #84]	; (8001280 <UART_init+0x108>)
 800122a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800122e:	6053      	str	r3, [r2, #4]
	USART2->CR1 |= (USART_CR1_UE); // set the enable to 1
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <UART_init+0x108>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <UART_init+0x108>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_TE); // set the transmitter enable to 1
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <UART_init+0x108>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <UART_init+0x108>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_RE); // set the receiver enable to 1
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <UART_init+0x108>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <UART_init+0x108>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_RXNEIE); // set the receiver interrupt enable to 1
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <UART_init+0x108>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a09      	ldr	r2, [pc, #36]	; (8001280 <UART_init+0x108>)
 800125a:	f043 0320 	orr.w	r3, r3, #32
 800125e:	6013      	str	r3, [r2, #0]

	NVIC->ISER[1] |= (1 << (USART2_IRQn & 0x1F));
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <UART_init+0x10c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <UART_init+0x10c>)
 8001266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800126a:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800126c:	b662      	cpsie	i
}
 800126e:	bf00      	nop

	__enable_irq(); // enable interrupt globally
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40004400 	.word	0x40004400
 8001284:	e000e100 	.word	0xe000e100

08001288 <UART_print>:

void UART_print(char data){
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	while ((USART2->ISR & USART_ISR_TXE) == 0){} // if TXE is high, it is empty, do
 8001292:	bf00      	nop
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <UART_print+0x44>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f9      	beq.n	8001294 <UART_print+0xc>
	USART2->TDR = data;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <UART_print+0x44>)
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	b292      	uxth	r2, r2
 80012a6:	851a      	strh	r2, [r3, #40]	; 0x28
	for (int i = 0; i < DELAY; i++);
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e002      	b.n	80012b4 <UART_print+0x2c>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3301      	adds	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ba:	dbf8      	blt.n	80012ae <UART_print+0x26>
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40004400 	.word	0x40004400

080012d0 <UART_print_str>:

void UART_print_str(char *str){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	for (int pos = 0; pos < strlen(str); pos++){
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	e009      	b.n	80012f2 <UART_print_str+0x22>
		UART_print(str[pos]);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ffce 	bl	8001288 <UART_print>
	for (int pos = 0; pos < strlen(str); pos++){
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3301      	adds	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7fe ff68 	bl	80001c8 <strlen>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8ee      	bhi.n	80012de <UART_print_str+0xe>
	}
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <UART_ESC_code>:

void UART_ESC_code(char *num, char letter){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
	while ((USART2->ISR & USART_ISR_TXE) == 0){} // if TXE is high, it is empty, do
 8001318:	bf00      	nop
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <UART_ESC_code+0x50>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f9      	beq.n	800131a <UART_ESC_code+0xe>
	USART2->TDR = 0x1B;
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <UART_ESC_code+0x50>)
 8001328:	221b      	movs	r2, #27
 800132a:	851a      	strh	r2, [r3, #40]	; 0x28
	for (int i = 0; i < DELAY; i++);
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	e002      	b.n	8001338 <UART_ESC_code+0x2c>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3301      	adds	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800133e:	dbf8      	blt.n	8001332 <UART_ESC_code+0x26>
	UART_print('[');
 8001340:	205b      	movs	r0, #91	; 0x5b
 8001342:	f7ff ffa1 	bl	8001288 <UART_print>
	UART_print_str(num);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffc2 	bl	80012d0 <UART_print_str>
	UART_print(letter);
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff9a 	bl	8001288 <UART_print>
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40004400 	.word	0x40004400

08001360 <main>:
void display_acvoltage(float ac_voltage);

void build_graph(void);

int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b09a      	sub	sp, #104	; 0x68
 8001364:	af00      	add	r7, sp, #0


  HAL_Init();
 8001366:	f000 fbfc 	bl	8001b62 <HAL_Init>

  SystemClock_Config();
 800136a:	f000 fb25 	bl	80019b8 <SystemClock_Config>
	  DC,
	  AC

  } state_type; // create variable with predefined state values

  state_type state = WAIT; // initialize to WAIT state
 800136e:	2300      	movs	r3, #0
 8001370:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  UART_init();
 8001374:	f7ff ff00 	bl	8001178 <UART_init>
  ADC_init();
 8001378:	f7ff fb4c 	bl	8000a14 <ADC_init>
  build_graph();
 800137c:	f000 fab4 	bl	80018e8 <build_graph>

  comp_init();
 8001380:	f7ff fe8c 	bl	800109c <comp_init>
  timer_init();
 8001384:	f7ff fd7a 	bl	8000e7c <timer_init>

  uint32_t wave_period;

  while (1)
  {
	  switch(state) {
 8001388:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800138c:	2b03      	cmp	r3, #3
 800138e:	d8fb      	bhi.n	8001388 <main+0x28>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <main+0x38>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013bf 	.word	0x080013bf
 80013a0:	0800143d 	.word	0x0800143d
 80013a4:	08001523 	.word	0x08001523
	  	  case(WAIT):
	  	  	  if (timerflag == 1) {
 80013a8:	4bab      	ldr	r3, [pc, #684]	; (8001658 <main+0x2f8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d103      	bne.n	80013b8 <main+0x58>
	  	  		  state = FREQUENCY;
 80013b0:	2301      	movs	r3, #1
 80013b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80013b6:	e002      	b.n	80013be <main+0x5e>
	  	  	  }
	  	  	  else {
	  	  		  state = WAIT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

//	  	  	  break; // skip other states, carries current state through next while loop iteration

	  	  case(FREQUENCY):
//				 if (timerflag == 1) {
				 wave_period = time - prev_t; // find period in decimal
 80013be:	4ba7      	ldr	r3, [pc, #668]	; (800165c <main+0x2fc>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4ba7      	ldr	r3, [pc, #668]	; (8001660 <main+0x300>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	647b      	str	r3, [r7, #68]	; 0x44

				 uint32_t freq = (CLOCKSPEED / wave_period); // convert to frequency
 80013ca:	4ba6      	ldr	r3, [pc, #664]	; (8001664 <main+0x304>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d4:	663b      	str	r3, [r7, #96]	; 0x60
				 // calibrate frequency
				 if (freq > 550) {
 80013d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013d8:	f240 2226 	movw	r2, #550	; 0x226
 80013dc:	4293      	cmp	r3, r2
 80013de:	d903      	bls.n	80013e8 <main+0x88>
					 freq = freq + 8;
 80013e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013e2:	3308      	adds	r3, #8
 80013e4:	663b      	str	r3, [r7, #96]	; 0x60
 80013e6:	e00e      	b.n	8001406 <main+0xa6>
				 }
				 else if (freq > 200 && freq <= 550) {
 80013e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013ea:	2bc8      	cmp	r3, #200	; 0xc8
 80013ec:	d908      	bls.n	8001400 <main+0xa0>
 80013ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013f0:	f240 2226 	movw	r2, #550	; 0x226
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d803      	bhi.n	8001400 <main+0xa0>
					 freq = freq + 4;
 80013f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013fa:	3304      	adds	r3, #4
 80013fc:	663b      	str	r3, [r7, #96]	; 0x60
 80013fe:	e002      	b.n	8001406 <main+0xa6>
				 }
				 else {
					 freq = freq + 1;
 8001400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001402:	3301      	adds	r3, #1
 8001404:	663b      	str	r3, [r7, #96]	; 0x60
				 }

				 char freq_str[9];
				 toString(freq, freq_str, 9); // convert frequency to string
 8001406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140a:	2209      	movs	r2, #9
 800140c:	4619      	mov	r1, r3
 800140e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001410:	f7ff fdd2 	bl	8000fb8 <toString>
				 display_freq(freq_str);
 8001414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f98f 	bl	800173c <display_freq>
				//		 UART_print_str(freq_str); // print on REALTERM
				//		 UART_print_str("Hz\n");
				 timerflag = 0;
 800141e:	4b8e      	ldr	r3, [pc, #568]	; (8001658 <main+0x2f8>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
				 for (uint32_t i = DELAY; i > 0; i--); 	// wait at least 20 (us) microseconds
 8001424:	4b90      	ldr	r3, [pc, #576]	; (8001668 <main+0x308>)
 8001426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001428:	e002      	b.n	8001430 <main+0xd0>
 800142a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800142c:	3b01      	subs	r3, #1
 800142e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f9      	bne.n	800142a <main+0xca>
//				 }
	  	  	  	 state = DC;
 8001436:	2302      	movs	r3, #2
 8001438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	  	  case(DC):
	  		    //disable timer interrupts in NVIC
			    NVIC->ISER[0] |= (0 << (TIM2_IRQn & 0x1F));
 800143c:	4b8b      	ldr	r3, [pc, #556]	; (800166c <main+0x30c>)
 800143e:	4a8b      	ldr	r2, [pc, #556]	; (800166c <main+0x30c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6013      	str	r3, [r2, #0]
	  	  	  	for (int i = 0; i < DC_SAMPLE_COUNT; i++) {
 8001444:	2300      	movs	r3, #0
 8001446:	65bb      	str	r3, [r7, #88]	; 0x58
 8001448:	e05d      	b.n	8001506 <main+0x1a6>
					if (count < DC_SAMPLE_COUNT){
 800144a:	4b89      	ldr	r3, [pc, #548]	; (8001670 <main+0x310>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f240 722d 	movw	r2, #1837	; 0x72d
 8001452:	4293      	cmp	r3, r2
 8001454:	d816      	bhi.n	8001484 <main+0x124>
							  dc_conv_arr[count] = adc_val; // put conversion value in to the arr
 8001456:	4b86      	ldr	r3, [pc, #536]	; (8001670 <main+0x310>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	4b85      	ldr	r3, [pc, #532]	; (8001674 <main+0x314>)
 800145e:	8819      	ldrh	r1, [r3, #0]
 8001460:	4b85      	ldr	r3, [pc, #532]	; (8001678 <main+0x318>)
 8001462:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
							  count += 1;
 8001466:	4b82      	ldr	r3, [pc, #520]	; (8001670 <main+0x310>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	b29a      	uxth	r2, r3
 800146e:	4b80      	ldr	r3, [pc, #512]	; (8001670 <main+0x310>)
 8001470:	801a      	strh	r2, [r3, #0]
							  ADC1->CR |= ADC_CR_ADSTART; // restart the conversion
 8001472:	4b82      	ldr	r3, [pc, #520]	; (800167c <main+0x31c>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	4a81      	ldr	r2, [pc, #516]	; (800167c <main+0x31c>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6093      	str	r3, [r2, #8]
							  eoc_flag = 0; // clear the flag used in ISR
 800147e:	4b80      	ldr	r3, [pc, #512]	; (8001680 <main+0x320>)
 8001480:	2200      	movs	r2, #0
 8001482:	801a      	strh	r2, [r3, #0]
					}
					//count = DC_SAMPLE_COUNT;
					if (count == DC_SAMPLE_COUNT){
 8001484:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <main+0x310>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	f240 722e 	movw	r2, #1838	; 0x72e
 800148c:	4293      	cmp	r3, r2
 800148e:	d137      	bne.n	8001500 <main+0x1a0>
							  uint32_t avg_int = find_avg(dc_conv_arr);
 8001490:	4879      	ldr	r0, [pc, #484]	; (8001678 <main+0x318>)
 8001492:	f7ff fbc9 	bl	8000c28 <find_avg>
 8001496:	6438      	str	r0, [r7, #64]	; 0x40
							  float avg_float = calibrate_volt(avg_int);
 8001498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800149a:	b29b      	uxth	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fc03 	bl	8000ca8 <calibrate_volt>
 80014a2:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
							  char DC_str[10];
							  //toString(avg_int, DC_str, 9); // convert frequency to string
							  floatToString(avg_float, DC_str, 2);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	2102      	movs	r1, #2
 80014ac:	4618      	mov	r0, r3
 80014ae:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80014b2:	f7ff fc25 	bl	8000d00 <floatToString>
							  for (uint32_t i = DELAY; i > 0; i--); 	// wait at least 20 (us) microseconds
 80014b6:	4b6c      	ldr	r3, [pc, #432]	; (8001668 <main+0x308>)
 80014b8:	657b      	str	r3, [r7, #84]	; 0x54
 80014ba:	e002      	b.n	80014c2 <main+0x162>
 80014bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014be:	3b01      	subs	r3, #1
 80014c0:	657b      	str	r3, [r7, #84]	; 0x54
 80014c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f9      	bne.n	80014bc <main+0x15c>
							  display_DC(DC_str);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 f94b 	bl	8001768 <display_DC>
							  UART_ESC_code(BLANK, 'H'); // top left
 80014d2:	2148      	movs	r1, #72	; 0x48
 80014d4:	486b      	ldr	r0, [pc, #428]	; (8001684 <main+0x324>)
 80014d6:	f7ff ff19 	bl	800130c <UART_ESC_code>
							  UART_ESC_code("9", 'B'); // 9 down
 80014da:	2142      	movs	r1, #66	; 0x42
 80014dc:	486a      	ldr	r0, [pc, #424]	; (8001688 <main+0x328>)
 80014de:	f7ff ff15 	bl	800130c <UART_ESC_code>
							  UART_ESC_code("38", 'C'); // 30 right
 80014e2:	2143      	movs	r1, #67	; 0x43
 80014e4:	4869      	ldr	r0, [pc, #420]	; (800168c <main+0x32c>)
 80014e6:	f7ff ff11 	bl	800130c <UART_ESC_code>
							  UART_ESC_code("1", 'K'); // clear line to the left
 80014ea:	214b      	movs	r1, #75	; 0x4b
 80014ec:	4868      	ldr	r0, [pc, #416]	; (8001690 <main+0x330>)
 80014ee:	f7ff ff0d 	bl	800130c <UART_ESC_code>
							  display_dcvoltage(avg_float);
 80014f2:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80014f6:	f000 f98b 	bl	8001810 <display_dcvoltage>
							  count = 0;
 80014fa:	4b5d      	ldr	r3, [pc, #372]	; (8001670 <main+0x310>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	801a      	strh	r2, [r3, #0]
	  	  	  	for (int i = 0; i < DC_SAMPLE_COUNT; i++) {
 8001500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001502:	3301      	adds	r3, #1
 8001504:	65bb      	str	r3, [r7, #88]	; 0x58
 8001506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001508:	f240 722d 	movw	r2, #1837	; 0x72d
 800150c:	4293      	cmp	r3, r2
 800150e:	dd9c      	ble.n	800144a <main+0xea>
					}
	  	  	  	}

	  		    //enable timer interrupts in NVIC
			    NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));
 8001510:	4b56      	ldr	r3, [pc, #344]	; (800166c <main+0x30c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a55      	ldr	r2, [pc, #340]	; (800166c <main+0x30c>)
 8001516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151a:	6013      	str	r3, [r2, #0]
	  	  	  	state = AC;
 800151c:	2303      	movs	r3, #3
 800151e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	  	  case(AC):
				//disable timer interrupts in NVIC
				//NVIC->ISER[0] |= (0 << (TIM2_IRQn & 0x1F));
	  	  	  	//count = 0;
	  		  	for (int i = 0; i < AC_SAMPLE_COUNT; i++) {
 8001522:	2300      	movs	r3, #0
 8001524:	653b      	str	r3, [r7, #80]	; 0x50
 8001526:	e088      	b.n	800163a <main+0x2da>
					if (count < AC_SAMPLE_COUNT) {
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <main+0x310>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	f648 729b 	movw	r2, #36763	; 0x8f9b
 8001530:	4293      	cmp	r3, r2
 8001532:	d81b      	bhi.n	800156c <main+0x20c>
						if (eoc_flag == 1) {
 8001534:	4b52      	ldr	r3, [pc, #328]	; (8001680 <main+0x320>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d17b      	bne.n	8001634 <main+0x2d4>
							eoc_flag = 0; // clear the flag used in ISR
 800153c:	4b50      	ldr	r3, [pc, #320]	; (8001680 <main+0x320>)
 800153e:	2200      	movs	r2, #0
 8001540:	801a      	strh	r2, [r3, #0]
							ac_conv_arr[count] = adc_val;
 8001542:	4b4b      	ldr	r3, [pc, #300]	; (8001670 <main+0x310>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <main+0x314>)
 800154a:	8819      	ldrh	r1, [r3, #0]
 800154c:	4b51      	ldr	r3, [pc, #324]	; (8001694 <main+0x334>)
 800154e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
							count += 1;
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <main+0x310>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	b29a      	uxth	r2, r3
 800155a:	4b45      	ldr	r3, [pc, #276]	; (8001670 <main+0x310>)
 800155c:	801a      	strh	r2, [r3, #0]
							ADC1->CR |= ADC_CR_ADSTART; // restart the conversion
 800155e:	4b47      	ldr	r3, [pc, #284]	; (800167c <main+0x31c>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4a46      	ldr	r2, [pc, #280]	; (800167c <main+0x31c>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6093      	str	r3, [r2, #8]
 800156a:	e063      	b.n	8001634 <main+0x2d4>
						}
					}
					else if (count == AC_SAMPLE_COUNT) {
 800156c:	4b40      	ldr	r3, [pc, #256]	; (8001670 <main+0x310>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	f648 729c 	movw	r2, #36764	; 0x8f9c
 8001574:	4293      	cmp	r3, r2
 8001576:	d15d      	bne.n	8001634 <main+0x2d4>
						//uint32_t rms_value = find_rms(ac_conv_arr);
						uint32_t p2p_value = find_p2p(ac_conv_arr);
 8001578:	4846      	ldr	r0, [pc, #280]	; (8001694 <main+0x334>)
 800157a:	f7ff fb7f 	bl	8000c7c <find_p2p>
 800157e:	63b8      	str	r0, [r7, #56]	; 0x38
						float p2p_float = calibrate_volt(p2p_value);
 8001580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fb8f 	bl	8000ca8 <calibrate_volt>
 800158a:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
						if (p2p_float > 3) {
 800158e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001592:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159e:	dd01      	ble.n	80015a4 <main+0x244>
							p2p_float = 3.0;
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <main+0x338>)
 80015a2:	64fb      	str	r3, [r7, #76]	; 0x4c
						}
						float rms_float = (1/(2 * sqrt(2)) * p2p_float);
 80015a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80015a6:	f7fe ff7b 	bl	80004a0 <__aeabi_f2d>
 80015aa:	a329      	add	r3, pc, #164	; (adr r3, 8001650 <main+0x2f0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7fe ffce 	bl	8000550 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff f9da 	bl	8000974 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
						char P2P_str[10];
						char RMS_str[10];
						floatToString(p2p_float, P2P_str, 2);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	2102      	movs	r1, #2
 80015ca:	4618      	mov	r0, r3
 80015cc:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80015d0:	f7ff fb96 	bl	8000d00 <floatToString>
						floatToString(rms_float, RMS_str, 2);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2102      	movs	r1, #2
 80015d8:	4618      	mov	r0, r3
 80015da:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80015de:	f7ff fb8f 	bl	8000d00 <floatToString>
						for (uint32_t i = DELAY; i > 0; i--); 	// wait at least 20 (us) microseconds
 80015e2:	4b21      	ldr	r3, [pc, #132]	; (8001668 <main+0x308>)
 80015e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80015e6:	e002      	b.n	80015ee <main+0x28e>
 80015e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ea:	3b01      	subs	r3, #1
 80015ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80015ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f9      	bne.n	80015e8 <main+0x288>
						display_P2P(P2P_str);
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f8ed 	bl	80017d8 <display_P2P>
						display_RMS(RMS_str);
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f8cd 	bl	80017a0 <display_RMS>
						UART_ESC_code(BLANK, 'H'); // top left
 8001606:	2148      	movs	r1, #72	; 0x48
 8001608:	481e      	ldr	r0, [pc, #120]	; (8001684 <main+0x324>)
 800160a:	f7ff fe7f 	bl	800130c <UART_ESC_code>
						UART_ESC_code("9", 'B'); // 9 down
 800160e:	2142      	movs	r1, #66	; 0x42
 8001610:	481d      	ldr	r0, [pc, #116]	; (8001688 <main+0x328>)
 8001612:	f7ff fe7b 	bl	800130c <UART_ESC_code>
						UART_ESC_code("40", 'C'); // 30 right
 8001616:	2143      	movs	r1, #67	; 0x43
 8001618:	4820      	ldr	r0, [pc, #128]	; (800169c <main+0x33c>)
 800161a:	f7ff fe77 	bl	800130c <UART_ESC_code>
						UART_ESC_code("0", 'K'); // clear line to the right
 800161e:	214b      	movs	r1, #75	; 0x4b
 8001620:	481f      	ldr	r0, [pc, #124]	; (80016a0 <main+0x340>)
 8001622:	f7ff fe73 	bl	800130c <UART_ESC_code>
						display_acvoltage(p2p_float);
 8001626:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800162a:	f000 f927 	bl	800187c <display_acvoltage>
						count = 0;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <main+0x310>)
 8001630:	2200      	movs	r2, #0
 8001632:	801a      	strh	r2, [r3, #0]
	  		  	for (int i = 0; i < AC_SAMPLE_COUNT; i++) {
 8001634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001636:	3301      	adds	r3, #1
 8001638:	653b      	str	r3, [r7, #80]	; 0x50
 800163a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800163c:	f648 729b 	movw	r2, #36763	; 0x8f9b
 8001640:	4293      	cmp	r3, r2
 8001642:	f77f af71 	ble.w	8001528 <main+0x1c8>
					}
	  		  	}
	  	  	  	state = WAIT;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  switch(state) {
 800164c:	e69c      	b.n	8001388 <main+0x28>
 800164e:	bf00      	nop
 8001650:	667f3bcc 	.word	0x667f3bcc
 8001654:	3fd6a09e 	.word	0x3fd6a09e
 8001658:	20012dc8 	.word	0x20012dc8
 800165c:	20012dcc 	.word	0x20012dcc
 8001660:	20012dd0 	.word	0x20012dd0
 8001664:	20000000 	.word	0x20000000
 8001668:	0007a120 	.word	0x0007a120
 800166c:	e000e100 	.word	0xe000e100
 8001670:	20000030 	.word	0x20000030
 8001674:	2000002e 	.word	0x2000002e
 8001678:	20000034 	.word	0x20000034
 800167c:	50040000 	.word	0x50040000
 8001680:	2000002c 	.word	0x2000002c
 8001684:	08002aec 	.word	0x08002aec
 8001688:	08002af0 	.word	0x08002af0
 800168c:	08002af4 	.word	0x08002af4
 8001690:	08002af8 	.word	0x08002af8
 8001694:	20000e90 	.word	0x20000e90
 8001698:	40400000 	.word	0x40400000
 800169c:	08002afc 	.word	0x08002afc
 80016a0:	08002b00 	.word	0x08002b00

080016a4 <TIM2_IRQHandler>:

} // end of main


void TIM2_IRQHandler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
    if(TIM2->SR & TIM_SR_CC4IF) // there is an interrupt
 80016a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d019      	beq.n	80016ea <TIM2_IRQHandler+0x46>
    {
        GPIOC->ODR ^= GPIO_ODR_OD0;
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <TIM2_IRQHandler+0x50>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <TIM2_IRQHandler+0x50>)
 80016bc:	f083 0301 	eor.w	r3, r3, #1
 80016c0:	6153      	str	r3, [r2, #20]
        prev_t = time;
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <TIM2_IRQHandler+0x54>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <TIM2_IRQHandler+0x58>)
 80016c8:	6013      	str	r3, [r2, #0]
        time = (TIM2->CCR4); // storing timer value in global variable
 80016ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <TIM2_IRQHandler+0x54>)
 80016d2:	6013      	str	r3, [r2, #0]
        TIM2->SR &= ~(TIM_SR_CC4IF); // clear flag
 80016d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016de:	f023 0310 	bic.w	r3, r3, #16
 80016e2:	6113      	str	r3, [r2, #16]
        timerflag = 1;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <TIM2_IRQHandler+0x5c>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
    }
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	48000800 	.word	0x48000800
 80016f8:	20012dcc 	.word	0x20012dcc
 80016fc:	20012dd0 	.word	0x20012dd0
 8001700:	20012dc8 	.word	0x20012dc8

08001704 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void) {
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	if((ADC1->ISR & ADC_ISR_EOC) != 0){
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <ADC1_2_IRQHandler+0x2c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <ADC1_2_IRQHandler+0x20>
		adc_val = ADC1->DR;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <ADC1_2_IRQHandler+0x2c>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <ADC1_2_IRQHandler+0x30>)
 800171c:	801a      	strh	r2, [r3, #0]
		eoc_flag = 1;
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <ADC1_2_IRQHandler+0x34>)
 8001720:	2201      	movs	r2, #1
 8001722:	801a      	strh	r2, [r3, #0]
	}
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	50040000 	.word	0x50040000
 8001734:	2000002e 	.word	0x2000002e
 8001738:	2000002c 	.word	0x2000002c

0800173c <display_freq>:

void display_freq(char *freq_str) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	UART_ESC_code(BLANK, 'H'); // top left
 8001744:	2148      	movs	r1, #72	; 0x48
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <display_freq+0x24>)
 8001748:	f7ff fde0 	bl	800130c <UART_ESC_code>
	UART_print_str("FREQUENCY: ");
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <display_freq+0x28>)
 800174e:	f7ff fdbf 	bl	80012d0 <UART_print_str>
	UART_print_str(freq_str);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fdbc 	bl	80012d0 <UART_print_str>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	08002aec 	.word	0x08002aec
 8001764:	08002b04 	.word	0x08002b04

08001768 <display_DC>:

void display_DC(char *DC_voltage) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	UART_ESC_code(BLANK, 'H'); // top left
 8001770:	2148      	movs	r1, #72	; 0x48
 8001772:	4808      	ldr	r0, [pc, #32]	; (8001794 <display_DC+0x2c>)
 8001774:	f7ff fdca 	bl	800130c <UART_ESC_code>
	UART_ESC_code("20", 'C'); // right
 8001778:	2143      	movs	r1, #67	; 0x43
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <display_DC+0x30>)
 800177c:	f7ff fdc6 	bl	800130c <UART_ESC_code>
	UART_print_str("DC Voltage: ");
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <display_DC+0x34>)
 8001782:	f7ff fda5 	bl	80012d0 <UART_print_str>
	UART_print_str(DC_voltage);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fda2 	bl	80012d0 <UART_print_str>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	08002aec 	.word	0x08002aec
 8001798:	08002b10 	.word	0x08002b10
 800179c:	08002b14 	.word	0x08002b14

080017a0 <display_RMS>:

void display_RMS(char *RMS_voltage) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	UART_ESC_code(BLANK, 'H'); // top left
 80017a8:	2148      	movs	r1, #72	; 0x48
 80017aa:	4808      	ldr	r0, [pc, #32]	; (80017cc <display_RMS+0x2c>)
 80017ac:	f7ff fdae 	bl	800130c <UART_ESC_code>
	UART_ESC_code("42", 'C'); // 30 right
 80017b0:	2143      	movs	r1, #67	; 0x43
 80017b2:	4807      	ldr	r0, [pc, #28]	; (80017d0 <display_RMS+0x30>)
 80017b4:	f7ff fdaa 	bl	800130c <UART_ESC_code>
	UART_print_str("RMS Value: ");
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <display_RMS+0x34>)
 80017ba:	f7ff fd89 	bl	80012d0 <UART_print_str>
	UART_print_str(RMS_voltage);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fd86 	bl	80012d0 <UART_print_str>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	08002aec 	.word	0x08002aec
 80017d0:	08002b24 	.word	0x08002b24
 80017d4:	08002b28 	.word	0x08002b28

080017d8 <display_P2P>:

void display_P2P(char *P2P_voltage) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	UART_ESC_code(BLANK, 'H'); // top left
 80017e0:	2148      	movs	r1, #72	; 0x48
 80017e2:	4808      	ldr	r0, [pc, #32]	; (8001804 <display_P2P+0x2c>)
 80017e4:	f7ff fd92 	bl	800130c <UART_ESC_code>
	UART_ESC_code("61", 'C'); // 30 right
 80017e8:	2143      	movs	r1, #67	; 0x43
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <display_P2P+0x30>)
 80017ec:	f7ff fd8e 	bl	800130c <UART_ESC_code>
	UART_print_str("P2P Value: ");
 80017f0:	4806      	ldr	r0, [pc, #24]	; (800180c <display_P2P+0x34>)
 80017f2:	f7ff fd6d 	bl	80012d0 <UART_print_str>
	UART_print_str(P2P_voltage);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fd6a 	bl	80012d0 <UART_print_str>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	08002aec 	.word	0x08002aec
 8001808:	08002b34 	.word	0x08002b34
 800180c:	08002b38 	.word	0x08002b38

08001810 <display_dcvoltage>:

void display_dcvoltage(float dc_voltage) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	ed87 0a01 	vstr	s0, [r7, #4]
	UART_ESC_code(BLANK, 'H'); // top left
 800181a:	2148      	movs	r1, #72	; 0x48
 800181c:	4813      	ldr	r0, [pc, #76]	; (800186c <display_dcvoltage+0x5c>)
 800181e:	f7ff fd75 	bl	800130c <UART_ESC_code>
	UART_ESC_code("9", 'B'); // 9 down
 8001822:	2142      	movs	r1, #66	; 0x42
 8001824:	4812      	ldr	r0, [pc, #72]	; (8001870 <display_dcvoltage+0x60>)
 8001826:	f7ff fd71 	bl	800130c <UART_ESC_code>
	UART_ESC_code("2", 'K'); // clear line
 800182a:	214b      	movs	r1, #75	; 0x4b
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <display_dcvoltage+0x64>)
 800182e:	f7ff fd6d 	bl	800130c <UART_ESC_code>
	int volt_int = (int)(dc_voltage * 12);
 8001832:	edd7 7a01 	vldr	s15, [r7, #4]
 8001836:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800183a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001842:	ee17 3a90 	vmov	r3, s15
 8001846:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < volt_int + 1; i++) {
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e005      	b.n	800185a <display_dcvoltage+0x4a>
		UART_print_str("#");
 800184e:	480a      	ldr	r0, [pc, #40]	; (8001878 <display_dcvoltage+0x68>)
 8001850:	f7ff fd3e 	bl	80012d0 <UART_print_str>
	for (int i = 0; i < volt_int + 1; i++) {
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3301      	adds	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	429a      	cmp	r2, r3
 8001860:	daf5      	bge.n	800184e <display_dcvoltage+0x3e>
	}
//	UART_ESC_code("9", 'B'); // 9 down
//	UART_ESC_code("38", 'C'); // 1 right
//	UART_ESC_code("1", 'K'); // clear line to the left
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	08002aec 	.word	0x08002aec
 8001870:	08002af0 	.word	0x08002af0
 8001874:	08002b44 	.word	0x08002b44
 8001878:	08002b48 	.word	0x08002b48

0800187c <display_acvoltage>:

void display_acvoltage(float ac_voltage) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	ed87 0a01 	vstr	s0, [r7, #4]
	UART_ESC_code(BLANK, 'H'); // top left
 8001886:	2148      	movs	r1, #72	; 0x48
 8001888:	4813      	ldr	r0, [pc, #76]	; (80018d8 <display_acvoltage+0x5c>)
 800188a:	f7ff fd3f 	bl	800130c <UART_ESC_code>
	UART_ESC_code("9", 'B'); // 1 down
 800188e:	2142      	movs	r1, #66	; 0x42
 8001890:	4812      	ldr	r0, [pc, #72]	; (80018dc <display_acvoltage+0x60>)
 8001892:	f7ff fd3b 	bl	800130c <UART_ESC_code>
	//UART_ESC_code("2", 'K'); // clear line
	UART_ESC_code("41", 'C'); // 30 right
 8001896:	2143      	movs	r1, #67	; 0x43
 8001898:	4811      	ldr	r0, [pc, #68]	; (80018e0 <display_acvoltage+0x64>)
 800189a:	f7ff fd37 	bl	800130c <UART_ESC_code>
	int volt_int = (int)(ac_voltage * 12);
 800189e:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80018a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ae:	ee17 3a90 	vmov	r3, s15
 80018b2:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < volt_int + 1; i++) {
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e005      	b.n	80018c6 <display_acvoltage+0x4a>
		UART_print_str("#");
 80018ba:	480a      	ldr	r0, [pc, #40]	; (80018e4 <display_acvoltage+0x68>)
 80018bc:	f7ff fd08 	bl	80012d0 <UART_print_str>
	for (int i = 0; i < volt_int + 1; i++) {
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	daf5      	bge.n	80018ba <display_acvoltage+0x3e>
	}
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	08002aec 	.word	0x08002aec
 80018dc:	08002af0 	.word	0x08002af0
 80018e0:	08002b4c 	.word	0x08002b4c
 80018e4:	08002b48 	.word	0x08002b48

080018e8 <build_graph>:

void build_graph(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
	UART_ESC_code("2", 'B'); // 2 down
 80018ee:	2142      	movs	r1, #66	; 0x42
 80018f0:	4822      	ldr	r0, [pc, #136]	; (800197c <build_graph+0x94>)
 80018f2:	f7ff fd0b 	bl	800130c <UART_ESC_code>
	//UART_ESC_code("1", 'C'); // 1 right
	UART_ESC_code("15", 'D'); // 15 left
 80018f6:	2144      	movs	r1, #68	; 0x44
 80018f8:	4821      	ldr	r0, [pc, #132]	; (8001980 <build_graph+0x98>)
 80018fa:	f7ff fd07 	bl	800130c <UART_ESC_code>
	UART_print_str("|-----------------DC----------------|");
 80018fe:	4821      	ldr	r0, [pc, #132]	; (8001984 <build_graph+0x9c>)
 8001900:	f7ff fce6 	bl	80012d0 <UART_print_str>
	UART_print_str("  X |-----------------AC----------------|");
 8001904:	4820      	ldr	r0, [pc, #128]	; (8001988 <build_graph+0xa0>)
 8001906:	f7ff fce3 	bl	80012d0 <UART_print_str>
	UART_ESC_code("77", 'D'); // left
 800190a:	2144      	movs	r1, #68	; 0x44
 800190c:	481f      	ldr	r0, [pc, #124]	; (800198c <build_graph+0xa4>)
 800190e:	f7ff fcfd 	bl	800130c <UART_ESC_code>
	for (int i = 0; i < 8; i++) {
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	e011      	b.n	800193c <build_graph+0x54>
		UART_ESC_code("1", 'B'); // 1 down
 8001918:	2142      	movs	r1, #66	; 0x42
 800191a:	481d      	ldr	r0, [pc, #116]	; (8001990 <build_graph+0xa8>)
 800191c:	f7ff fcf6 	bl	800130c <UART_ESC_code>
		UART_ESC_code("38", 'C'); // 1 right
 8001920:	2143      	movs	r1, #67	; 0x43
 8001922:	481c      	ldr	r0, [pc, #112]	; (8001994 <build_graph+0xac>)
 8001924:	f7ff fcf2 	bl	800130c <UART_ESC_code>
		UART_print_str("X");
 8001928:	481b      	ldr	r0, [pc, #108]	; (8001998 <build_graph+0xb0>)
 800192a:	f7ff fcd1 	bl	80012d0 <UART_print_str>
		UART_ESC_code("39", 'D'); // left
 800192e:	2144      	movs	r1, #68	; 0x44
 8001930:	481a      	ldr	r0, [pc, #104]	; (800199c <build_graph+0xb4>)
 8001932:	f7ff fceb 	bl	800130c <UART_ESC_code>
	for (int i = 0; i < 8; i++) {
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3301      	adds	r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b07      	cmp	r3, #7
 8001940:	ddea      	ble.n	8001918 <build_graph+0x30>
	}
	UART_ESC_code("50", 'D'); // left
 8001942:	2144      	movs	r1, #68	; 0x44
 8001944:	4816      	ldr	r0, [pc, #88]	; (80019a0 <build_graph+0xb8>)
 8001946:	f7ff fce1 	bl	800130c <UART_ESC_code>
	UART_print_str("|-----|-----|-----|-----|-----|-----|");
 800194a:	4816      	ldr	r0, [pc, #88]	; (80019a4 <build_graph+0xbc>)
 800194c:	f7ff fcc0 	bl	80012d0 <UART_print_str>
	UART_print_str("  X |-----|-----|-----|-----|-----|-----|");
 8001950:	4815      	ldr	r0, [pc, #84]	; (80019a8 <build_graph+0xc0>)
 8001952:	f7ff fcbd 	bl	80012d0 <UART_print_str>
	UART_ESC_code("1", 'B'); // 1 down
 8001956:	2142      	movs	r1, #66	; 0x42
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <build_graph+0xa8>)
 800195a:	f7ff fcd7 	bl	800130c <UART_ESC_code>
	UART_ESC_code("80", 'D'); // left
 800195e:	2144      	movs	r1, #68	; 0x44
 8001960:	4812      	ldr	r0, [pc, #72]	; (80019ac <build_graph+0xc4>)
 8001962:	f7ff fcd3 	bl	800130c <UART_ESC_code>
	//UART_ESC_code("1", 'C'); // 1 right
	UART_print_str("0    0.5   1.0   1.5   2.0   2.5   3.0|X|");
 8001966:	4812      	ldr	r0, [pc, #72]	; (80019b0 <build_graph+0xc8>)
 8001968:	f7ff fcb2 	bl	80012d0 <UART_print_str>
	UART_print_str("0    0.5   1.0   1.5   2.0   2.5   3.0");
 800196c:	4811      	ldr	r0, [pc, #68]	; (80019b4 <build_graph+0xcc>)
 800196e:	f7ff fcaf 	bl	80012d0 <UART_print_str>

}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	08002b44 	.word	0x08002b44
 8001980:	08002b50 	.word	0x08002b50
 8001984:	08002b54 	.word	0x08002b54
 8001988:	08002b7c 	.word	0x08002b7c
 800198c:	08002ba8 	.word	0x08002ba8
 8001990:	08002af8 	.word	0x08002af8
 8001994:	08002af4 	.word	0x08002af4
 8001998:	08002bac 	.word	0x08002bac
 800199c:	08002bb0 	.word	0x08002bb0
 80019a0:	08002bb4 	.word	0x08002bb4
 80019a4:	08002bb8 	.word	0x08002bb8
 80019a8:	08002be0 	.word	0x08002be0
 80019ac:	08002c0c 	.word	0x08002c0c
 80019b0:	08002c10 	.word	0x08002c10
 80019b4:	08002c3c 	.word	0x08002c3c

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b096      	sub	sp, #88	; 0x58
 80019bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	2244      	movs	r2, #68	; 0x44
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 f876 	bl	8002ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019cc:	463b      	mov	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019de:	f000 fa29 	bl	8001e34 <HAL_PWREx_ControlVoltageScaling>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019e8:	f000 f82c 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019ec:	2310      	movs	r3, #16
 80019ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019f0:	2301      	movs	r3, #1
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80019f8:	2390      	movs	r3, #144	; 0x90
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fa6b 	bl	8001ee0 <HAL_RCC_OscConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001a10:	f000 f818 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	230f      	movs	r3, #15
 8001a16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fe33 	bl	8002698 <HAL_RCC_ClockConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a38:	f000 f804 	bl	8001a44 <Error_Handler>
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3758      	adds	r7, #88	; 0x58
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>
	...

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_MspInit+0x44>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_MspInit+0x44>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6613      	str	r3, [r2, #96]	; 0x60
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_MspInit+0x44>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_MspInit+0x44>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_MspInit+0x44>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_MspInit+0x44>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <NMI_Handler+0x4>

08001a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <HardFault_Handler+0x4>

08001aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <MemManage_Handler+0x4>

08001aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae4:	f000 f892 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}

08001aec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <SystemInit+0x20>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <SystemInit+0x20>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b14:	f7ff ffea 	bl	8001aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b1a:	490d      	ldr	r1, [pc, #52]	; (8001b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <LoopForever+0xe>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b30:	4c0a      	ldr	r4, [pc, #40]	; (8001b5c <LoopForever+0x16>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f000 ff97 	bl	8002a70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b42:	f7ff fc0d 	bl	8001360 <main>

08001b46 <LoopForever>:

LoopForever:
    b LoopForever
 8001b46:	e7fe      	b.n	8001b46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b50:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b54:	08002cac 	.word	0x08002cac
  ldr r2, =_sbss
 8001b58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b5c:	20012dd8 	.word	0x20012dd8

08001b60 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC3_IRQHandler>

08001b62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 f91f 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b72:	200f      	movs	r0, #15
 8001b74:	f000 f80e 	bl	8001b94 <HAL_InitTick>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	71fb      	strb	r3, [r7, #7]
 8001b82:	e001      	b.n	8001b88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b84:	f7ff ff64 	bl	8001a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b88:	79fb      	ldrb	r3, [r7, #7]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_InitTick+0x6c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d023      	beq.n	8001bf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_InitTick+0x70>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <HAL_InitTick+0x6c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f91d 	bl	8001dfe <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10f      	bne.n	8001bea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d809      	bhi.n	8001be4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f000 f8f5 	bl	8001dc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_InitTick+0x74>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e007      	b.n	8001bf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	e004      	b.n	8001bf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
 8001bee:	e001      	b.n	8001bf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000000c 	.word	0x2000000c
 8001c04:	20000004 	.word	0x20000004
 8001c08:	20000008 	.word	0x20000008

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	2000000c 	.word	0x2000000c
 8001c30:	20012dd4 	.word	0x20012dd4

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20012dd4 	.word	0x20012dd4

08001c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <__NVIC_GetPriorityGrouping+0x18>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f7ff ff8e 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff47 	bl	8001c4c <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff5c 	bl	8001c94 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff8e 	bl	8001d04 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5d 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffb0 	bl	8001d6c <SysTick_Config>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40007000 	.word	0x40007000

08001e34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e42:	d130      	bne.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e50:	d038      	beq.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2232      	movs	r2, #50	; 0x32
 8001e68:	fb02 f303 	mul.w	r3, r2, r3
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0c9b      	lsrs	r3, r3, #18
 8001e74:	3301      	adds	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e78:	e002      	b.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8c:	d102      	bne.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f2      	bne.n	8001e7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea0:	d110      	bne.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e00f      	b.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb2:	d007      	beq.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	20000004 	.word	0x20000004
 8001edc:	431bde83 	.word	0x431bde83

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e3ca      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef2:	4b97      	ldr	r3, [pc, #604]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efc:	4b94      	ldr	r3, [pc, #592]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80e4 	beq.w	80020dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d007      	beq.n	8001f2a <HAL_RCC_OscConfig+0x4a>
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	f040 808b 	bne.w	8002038 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	f040 8087 	bne.w	8002038 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f2a:	4b89      	ldr	r3, [pc, #548]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x62>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e3a2      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1a      	ldr	r2, [r3, #32]
 8001f46:	4b82      	ldr	r3, [pc, #520]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_RCC_OscConfig+0x7c>
 8001f52:	4b7f      	ldr	r3, [pc, #508]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f5a:	e005      	b.n	8001f68 <HAL_RCC_OscConfig+0x88>
 8001f5c:	4b7c      	ldr	r3, [pc, #496]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d223      	bcs.n	8001fb4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fd1d 	bl	80029b0 <RCC_SetFlashLatencyFromMSIRange>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e383      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f80:	4b73      	ldr	r3, [pc, #460]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a72      	ldr	r2, [pc, #456]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b70      	ldr	r3, [pc, #448]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	496d      	ldr	r1, [pc, #436]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9e:	4b6c      	ldr	r3, [pc, #432]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	4968      	ldr	r1, [pc, #416]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
 8001fb2:	e025      	b.n	8002000 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fb4:	4b66      	ldr	r3, [pc, #408]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a65      	ldr	r2, [pc, #404]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b63      	ldr	r3, [pc, #396]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4960      	ldr	r1, [pc, #384]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd2:	4b5f      	ldr	r3, [pc, #380]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	495b      	ldr	r1, [pc, #364]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d109      	bne.n	8002000 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fcdd 	bl	80029b0 <RCC_SetFlashLatencyFromMSIRange>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e343      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002000:	f000 fc4a 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b52      	ldr	r3, [pc, #328]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	4950      	ldr	r1, [pc, #320]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	4a4e      	ldr	r2, [pc, #312]	; (8002158 <HAL_RCC_OscConfig+0x278>)
 800201e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002020:	4b4e      	ldr	r3, [pc, #312]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fdb5 	bl	8001b94 <HAL_InitTick>
 800202a:	4603      	mov	r3, r0
 800202c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d052      	beq.n	80020da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	e327      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d032      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002040:	4b43      	ldr	r3, [pc, #268]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a42      	ldr	r2, [pc, #264]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800204c:	f7ff fdf2 	bl	8001c34 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002054:	f7ff fdee 	bl	8001c34 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e310      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002066:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002072:	4b37      	ldr	r3, [pc, #220]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a36      	ldr	r2, [pc, #216]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b34      	ldr	r3, [pc, #208]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4931      	ldr	r1, [pc, #196]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002090:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	492c      	ldr	r1, [pc, #176]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	e01a      	b.n	80020dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a29      	ldr	r2, [pc, #164]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fdbf 	bl	8001c34 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ba:	f7ff fdbb 	bl	8001c34 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e2dd      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020cc:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x1da>
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d074      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x21a>
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	d10e      	bne.n	8002112 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d10b      	bne.n	8002112 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d064      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d160      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e2ba      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x24a>
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	e026      	b.n	8002178 <HAL_RCC_OscConfig+0x298>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002132:	d115      	bne.n	8002160 <HAL_RCC_OscConfig+0x280>
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a05      	ldr	r2, [pc, #20]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 800213a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a02      	ldr	r2, [pc, #8]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e014      	b.n	8002178 <HAL_RCC_OscConfig+0x298>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	08002c64 	.word	0x08002c64
 8002158:	20000004 	.word	0x20000004
 800215c:	20000008 	.word	0x20000008
 8002160:	4ba0      	ldr	r3, [pc, #640]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a9f      	ldr	r2, [pc, #636]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 8002166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b9d      	ldr	r3, [pc, #628]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a9c      	ldr	r2, [pc, #624]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 8002172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff fd58 	bl	8001c34 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff fd54 	bl	8001c34 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e276      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219a:	4b92      	ldr	r3, [pc, #584]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x2a8>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7ff fd44 	bl	8001c34 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7ff fd40 	bl	8001c34 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e262      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c2:	4b88      	ldr	r3, [pc, #544]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2d0>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d060      	beq.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_OscConfig+0x310>
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d119      	bne.n	800221e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d116      	bne.n	800221e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f0:	4b7c      	ldr	r3, [pc, #496]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_OscConfig+0x328>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e23f      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b76      	ldr	r3, [pc, #472]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	4973      	ldr	r1, [pc, #460]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	e040      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d023      	beq.n	800226e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002226:	4b6f      	ldr	r3, [pc, #444]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6e      	ldr	r2, [pc, #440]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7ff fcff 	bl	8001c34 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223a:	f7ff fcfb 	bl	8001c34 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e21d      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224c:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b62      	ldr	r3, [pc, #392]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	495f      	ldr	r1, [pc, #380]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
 800226c:	e018      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226e:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a5c      	ldr	r2, [pc, #368]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 8002274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7ff fcdb 	bl	8001c34 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7ff fcd7 	bl	8001c34 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1f9      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d03c      	beq.n	8002326 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01c      	beq.n	80022ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b4:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80022b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ba:	4a4a      	ldr	r2, [pc, #296]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7ff fcb6 	bl	8001c34 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022cc:	f7ff fcb2 	bl	8001c34 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1d4      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80022e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ef      	beq.n	80022cc <HAL_RCC_OscConfig+0x3ec>
 80022ec:	e01b      	b.n	8002326 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80022f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f4:	4a3b      	ldr	r2, [pc, #236]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7ff fc99 	bl	8001c34 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002306:	f7ff fc95 	bl	8001c34 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1b7      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ef      	bne.n	8002306 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80a6 	beq.w	8002480 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002334:	2300      	movs	r3, #0
 8002336:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10d      	bne.n	8002360 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	4a26      	ldr	r2, [pc, #152]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234e:	6593      	str	r3, [r2, #88]	; 0x58
 8002350:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235c:	2301      	movs	r3, #1
 800235e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <HAL_RCC_OscConfig+0x508>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d118      	bne.n	800239e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <HAL_RCC_OscConfig+0x508>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <HAL_RCC_OscConfig+0x508>)
 8002372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002376:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002378:	f7ff fc5c 	bl	8001c34 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002380:	f7ff fc58 	bl	8001c34 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e17a      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_RCC_OscConfig+0x508>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4d8>
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b6:	e029      	b.n	800240c <HAL_RCC_OscConfig+0x52c>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d115      	bne.n	80023ec <HAL_RCC_OscConfig+0x50c>
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	4a03      	ldr	r2, [pc, #12]	; (80023e4 <HAL_RCC_OscConfig+0x504>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e0:	e014      	b.n	800240c <HAL_RCC_OscConfig+0x52c>
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
 80023ec:	4b9c      	ldr	r3, [pc, #624]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	4a9b      	ldr	r2, [pc, #620]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fc:	4b98      	ldr	r3, [pc, #608]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	4a97      	ldr	r2, [pc, #604]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d016      	beq.n	8002442 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7ff fc0e 	bl	8001c34 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241a:	e00a      	b.n	8002432 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7ff fc0a 	bl	8001c34 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e12a      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002432:	4b8b      	ldr	r3, [pc, #556]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ed      	beq.n	800241c <HAL_RCC_OscConfig+0x53c>
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7ff fbf7 	bl	8001c34 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7ff fbf3 	bl	8001c34 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e113      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002460:	4b7f      	ldr	r3, [pc, #508]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1ed      	bne.n	800244a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800246e:	7ffb      	ldrb	r3, [r7, #31]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002474:	4b7a      	ldr	r3, [pc, #488]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4a79      	ldr	r2, [pc, #484]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 800247a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80fe 	beq.w	8002686 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	2b02      	cmp	r3, #2
 8002490:	f040 80d0 	bne.w	8002634 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002494:	4b72      	ldr	r3, [pc, #456]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0203 	and.w	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d130      	bne.n	800250a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	3b01      	subs	r3, #1
 80024b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d127      	bne.n	800250a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d11f      	bne.n	800250a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024d4:	2a07      	cmp	r2, #7
 80024d6:	bf14      	ite	ne
 80024d8:	2201      	movne	r2, #1
 80024da:	2200      	moveq	r2, #0
 80024dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024de:	4293      	cmp	r3, r2
 80024e0:	d113      	bne.n	800250a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	085b      	lsrs	r3, r3, #1
 80024ee:	3b01      	subs	r3, #1
 80024f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d109      	bne.n	800250a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	085b      	lsrs	r3, r3, #1
 8002502:	3b01      	subs	r3, #1
 8002504:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d06e      	beq.n	80025e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b0c      	cmp	r3, #12
 800250e:	d069      	beq.n	80025e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800251c:	4b50      	ldr	r3, [pc, #320]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0ad      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800252c:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002538:	f7ff fb7c 	bl	8001c34 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff fb78 	bl	8001c34 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e09a      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002552:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255e:	4b40      	ldr	r3, [pc, #256]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	4b40      	ldr	r3, [pc, #256]	; (8002664 <HAL_RCC_OscConfig+0x784>)
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800256e:	3a01      	subs	r2, #1
 8002570:	0112      	lsls	r2, r2, #4
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002578:	0212      	lsls	r2, r2, #8
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002580:	0852      	lsrs	r2, r2, #1
 8002582:	3a01      	subs	r2, #1
 8002584:	0552      	lsls	r2, r2, #21
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800258c:	0852      	lsrs	r2, r2, #1
 800258e:	3a01      	subs	r2, #1
 8002590:	0652      	lsls	r2, r2, #25
 8002592:	4311      	orrs	r1, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002598:	0912      	lsrs	r2, r2, #4
 800259a:	0452      	lsls	r2, r2, #17
 800259c:	430a      	orrs	r2, r1
 800259e:	4930      	ldr	r1, [pc, #192]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a2d      	ldr	r2, [pc, #180]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80025aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b0:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a2a      	ldr	r2, [pc, #168]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80025b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025bc:	f7ff fb3a 	bl	8001c34 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7ff fb36 	bl	8001c34 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e058      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d6:	4b22      	ldr	r3, [pc, #136]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025e2:	e050      	b.n	8002686 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e04f      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d148      	bne.n	8002686 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a19      	ldr	r2, [pc, #100]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002600:	4b17      	ldr	r3, [pc, #92]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a16      	ldr	r2, [pc, #88]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800260c:	f7ff fb12 	bl	8001c34 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff fb0e 	bl	8001c34 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e030      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002626:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x734>
 8002632:	e028      	b.n	8002686 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d023      	beq.n	8002682 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a08      	ldr	r2, [pc, #32]	; (8002660 <HAL_RCC_OscConfig+0x780>)
 8002640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7ff faf5 	bl	8001c34 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264c:	e00c      	b.n	8002668 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264e:	f7ff faf1 	bl	8001c34 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d905      	bls.n	8002668 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e013      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
 8002660:	40021000 	.word	0x40021000
 8002664:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_OscConfig+0x7b0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ec      	bne.n	800264e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_OscConfig+0x7b0>)
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	4905      	ldr	r1, [pc, #20]	; (8002690 <HAL_RCC_OscConfig+0x7b0>)
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_OscConfig+0x7b4>)
 800267c:	4013      	ands	r3, r2
 800267e:	60cb      	str	r3, [r1, #12]
 8002680:	e001      	b.n	8002686 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	feeefffc 	.word	0xfeeefffc

08002698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0e7      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ac:	4b75      	ldr	r3, [pc, #468]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d910      	bls.n	80026dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 0207 	bic.w	r2, r3, #7
 80026c2:	4970      	ldr	r1, [pc, #448]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b6e      	ldr	r3, [pc, #440]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0cf      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d010      	beq.n	800270a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d908      	bls.n	800270a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4960      	ldr	r1, [pc, #384]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d04c      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271e:	4b5a      	ldr	r3, [pc, #360]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d121      	bne.n	800276e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0a6      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002736:	4b54      	ldr	r3, [pc, #336]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d115      	bne.n	800276e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e09a      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800274e:	4b4e      	ldr	r3, [pc, #312]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e08e      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e086      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b46      	ldr	r3, [pc, #280]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4943      	ldr	r1, [pc, #268]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002780:	f7ff fa58 	bl	8001c34 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7ff fa54 	bl	8001c34 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e06e      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	4b31      	ldr	r3, [pc, #196]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d208      	bcs.n	80027de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	492b      	ldr	r1, [pc, #172]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027de:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d210      	bcs.n	800280e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 0207 	bic.w	r2, r3, #7
 80027f4:	4923      	ldr	r1, [pc, #140]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fc:	4b21      	ldr	r3, [pc, #132]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d001      	beq.n	800280e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e036      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	4918      	ldr	r1, [pc, #96]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d009      	beq.n	800284c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4910      	ldr	r1, [pc, #64]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800284c:	f000 f824 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	490b      	ldr	r1, [pc, #44]	; (800288c <HAL_RCC_ClockConfig+0x1f4>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
 8002868:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1f8>)
 800286a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1fc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff f98f 	bl	8001b94 <HAL_InitTick>
 8002876:	4603      	mov	r3, r0
 8002878:	72fb      	strb	r3, [r7, #11]

  return status;
 800287a:	7afb      	ldrb	r3, [r7, #11]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40022000 	.word	0x40022000
 8002888:	40021000 	.word	0x40021000
 800288c:	08002c64 	.word	0x08002c64
 8002890:	20000004 	.word	0x20000004
 8002894:	20000008 	.word	0x20000008

08002898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a6:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b0:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x34>
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d121      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d11e      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028d8:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e005      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028f4:	4a2b      	ldr	r2, [pc, #172]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d102      	bne.n	8002916 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	e004      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d101      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800291c:	4b23      	ldr	r3, [pc, #140]	; (80029ac <HAL_RCC_GetSysClockFreq+0x114>)
 800291e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d134      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d003      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0xa6>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d003      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0xac>
 800293c:	e005      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002940:	617b      	str	r3, [r7, #20]
      break;
 8002942:	e005      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002946:	617b      	str	r3, [r7, #20]
      break;
 8002948:	e002      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	617b      	str	r3, [r7, #20]
      break;
 800294e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	3301      	adds	r3, #1
 800295c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	fb03 f202 	mul.w	r2, r3, r2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	0e5b      	lsrs	r3, r3, #25
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	3301      	adds	r3, #1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002990:	69bb      	ldr	r3, [r7, #24]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	08002c74 	.word	0x08002c74
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	007a1200 	.word	0x007a1200

080029b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029c8:	f7ff fa26 	bl	8001e18 <HAL_PWREx_GetVoltageRange>
 80029cc:	6178      	str	r0, [r7, #20]
 80029ce:	e014      	b.n	80029fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029d0:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029da:	6593      	str	r3, [r2, #88]	; 0x58
 80029dc:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029e8:	f7ff fa16 	bl	8001e18 <HAL_PWREx_GetVoltageRange>
 80029ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a00:	d10b      	bne.n	8002a1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b80      	cmp	r3, #128	; 0x80
 8002a06:	d919      	bls.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2ba0      	cmp	r3, #160	; 0xa0
 8002a0c:	d902      	bls.n	8002a14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a0e:	2302      	movs	r3, #2
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	e013      	b.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a14:	2301      	movs	r3, #1
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	e010      	b.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d902      	bls.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a20:	2303      	movs	r3, #3
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	e00a      	b.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d102      	bne.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	e004      	b.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b70      	cmp	r3, #112	; 0x70
 8002a36:	d101      	bne.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a38:	2301      	movs	r3, #1
 8002a3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f023 0207 	bic.w	r2, r3, #7
 8002a44:	4909      	ldr	r1, [pc, #36]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a4c:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d001      	beq.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40022000 	.word	0x40022000

08002a70 <__libc_init_array>:
 8002a70:	b570      	push	{r4, r5, r6, lr}
 8002a72:	4d0d      	ldr	r5, [pc, #52]	; (8002aa8 <__libc_init_array+0x38>)
 8002a74:	4c0d      	ldr	r4, [pc, #52]	; (8002aac <__libc_init_array+0x3c>)
 8002a76:	1b64      	subs	r4, r4, r5
 8002a78:	10a4      	asrs	r4, r4, #2
 8002a7a:	2600      	movs	r6, #0
 8002a7c:	42a6      	cmp	r6, r4
 8002a7e:	d109      	bne.n	8002a94 <__libc_init_array+0x24>
 8002a80:	4d0b      	ldr	r5, [pc, #44]	; (8002ab0 <__libc_init_array+0x40>)
 8002a82:	4c0c      	ldr	r4, [pc, #48]	; (8002ab4 <__libc_init_array+0x44>)
 8002a84:	f000 f820 	bl	8002ac8 <_init>
 8002a88:	1b64      	subs	r4, r4, r5
 8002a8a:	10a4      	asrs	r4, r4, #2
 8002a8c:	2600      	movs	r6, #0
 8002a8e:	42a6      	cmp	r6, r4
 8002a90:	d105      	bne.n	8002a9e <__libc_init_array+0x2e>
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
 8002a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a98:	4798      	blx	r3
 8002a9a:	3601      	adds	r6, #1
 8002a9c:	e7ee      	b.n	8002a7c <__libc_init_array+0xc>
 8002a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa2:	4798      	blx	r3
 8002aa4:	3601      	adds	r6, #1
 8002aa6:	e7f2      	b.n	8002a8e <__libc_init_array+0x1e>
 8002aa8:	08002ca4 	.word	0x08002ca4
 8002aac:	08002ca4 	.word	0x08002ca4
 8002ab0:	08002ca4 	.word	0x08002ca4
 8002ab4:	08002ca8 	.word	0x08002ca8

08002ab8 <memset>:
 8002ab8:	4402      	add	r2, r0
 8002aba:	4603      	mov	r3, r0
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <memset+0xa>
 8002ac0:	4770      	bx	lr
 8002ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac6:	e7f9      	b.n	8002abc <memset+0x4>

08002ac8 <_init>:
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	bf00      	nop
 8002acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ace:	bc08      	pop	{r3}
 8002ad0:	469e      	mov	lr, r3
 8002ad2:	4770      	bx	lr

08002ad4 <_fini>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	bf00      	nop
 8002ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ada:	bc08      	pop	{r3}
 8002adc:	469e      	mov	lr, r3
 8002ade:	4770      	bx	lr
